// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String        @id @default(cuid())
  createdAt         DateTime      @default(now())
  email             String        @unique
  name              String
  password          String
  attemptedContests UserContest[]
  submissions       Submission[]
}

model TestCase {
  id             Int     @id @default(autoincrement())
  input          String
  expectedOutput String
  problemId      Int
  problem        Problem @relation(fields: [problemId], references: [id])
}

model Problem {
  id              Int              @id @default(autoincrement())
  name            String
  content         String
  boilerPlate     BoilerPlate[]
  difficultyLevel DifficultyLevel
  testcases       TestCase[]
  contests        ContestProblem[]
  submissions     Submission[]
}

model Contest {
  id           Int              @id @default(autoincrement())
  name         String
  noOfProblems Int
  level        ContestLevel
  closesOn     DateTime
  problems     ContestProblem[]
  users        UserContest[]
  submissions  Submission[]
}

// Join table
model UserContest {
  userId    String
  contestId Int
  user      User    @relation(fields: [userId], references: [id])
  contest   Contest @relation(fields: [contestId], references: [id])

  @@id([userId, contestId])
}

// Join table
model ContestProblem {
  problemId Int
  contestId Int
  problem   Problem @relation(fields: [problemId], references: [id])
  contest   Contest @relation(fields: [contestId], references: [id])

  @@id([problemId, contestId])
}

// A User can participate in multiple Contests, and a Contest can have multiple Users
// participating. This many-to-many relationship is facilitated by the 
// Submission model. This Submission model is a join table that contains foreign keys
// referencing the primary keys of the two tables.
model Submission {
  id              Int              @id @default(autoincrement())
  status          SubmissionStatus
  submittedCode   String
  languageId      Int
  createdAt       DateTime
  runTime         Float?
  memory          Float?
  testCasesPassed Int?
  output          String?
  error           String?
  userId          String
  problemId       Int
  contestId       Int?
  language        Language         @relation(fields: [languageId], references: [id])
  user            User             @relation(fields: [userId], references: [id])
  problem         Problem          @relation(fields: [problemId], references: [id])
  contest         Contest?         @relation(fields: [contestId], references: [id])

  @@index([userId, problemId])
}

model BoilerPlate {
  id              Int      @id @default(autoincrement())
  boilerPlateCode String
  languageId      Int      @unique
  problemId       Int
  language        Language @relation(fields: [languageId], references: [id])
  Problem         Problem  @relation(fields: [problemId], references: [id])
}

model Language {
  id          Int          @id @default(autoincrement())
  judge0Name  String
  judge0Id    Int
  monacoName  String
  boilerPlate BoilerPlate?
  submissions Submission[]
}

enum ContestLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum DifficultyLevel {
  EASY
  MEDIUM
  HARD
}

enum SubmissionStatus {
  REJECTED
  ACCEPTED
  PENDING
}
