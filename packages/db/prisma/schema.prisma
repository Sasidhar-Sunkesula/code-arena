// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String        @id @default(cuid())
  createdAt         DateTime      @default(now())
  email             String        @unique
  name              String
  password          String
  attemptedContests UserContest[]
  submissions       Submission[]
}

model TestCase {
  id              Int              @id @default(autoincrement())
  input           String
  expectedOutput  String
  problemId       Int
  problem         Problem          @relation(fields: [problemId], references: [id])
  testCaseResults TestCaseResult[]
}

model Problem {
  id              Int              @id @default(autoincrement())
  name            String
  content         String
  contributedBy   String           @default("Anonymous")
  difficultyLevel DifficultyLevel
  boilerPlate     BoilerPlate[]
  testcases       TestCase[]
  contests        ContestProblem[]
  submissions     Submission[]
}

model Contest {
  id           Int              @id @default(autoincrement())
  name         String
  noOfProblems Int
  level        ContestLevel
  closesOn     DateTime
  problems     ContestProblem[]
  users        UserContest[]
  submissions  Submission[]
}

// Join table
model UserContest {
  userId    String
  contestId Int
  user      User    @relation(fields: [userId], references: [id])
  contest   Contest @relation(fields: [contestId], references: [id])

  @@id([userId, contestId])
}

// Join table
model ContestProblem {
  problemId Int
  contestId Int
  problem   Problem @relation(fields: [problemId], references: [id])
  contest   Contest @relation(fields: [contestId], references: [id])

  @@id([problemId, contestId])
}

// A User can participate in multiple Contests, and a Contest can have multiple Users
// participating. This many-to-many relationship is facilitated by the 
// Submission model. This Submission model is a join table that contains foreign keys
// referencing the primary keys of the two tables.
model Submission {
  id              Int              @id @default(autoincrement())
  status          SubmissionStatus
  submittedCode   String
  submissionType  SubmissionType   @default(REGULAR)
  languageId      Int
  createdAt       DateTime
  runTime         Float?
  memory          Float?
  testCasesPassed Int?
  userId          String
  problemId       Int
  contestId       Int?
  language        Language         @relation(fields: [languageId], references: [id])
  user            User             @relation(fields: [userId], references: [id])
  problem         Problem          @relation(fields: [problemId], references: [id])
  contest         Contest?         @relation(fields: [contestId], references: [id])
  testCaseResults TestCaseResult[]

  @@index([userId, problemId])
}

model TestCaseResult {
  id           Int              @id @default(autoincrement())
  submissionId Int
  testCaseId   Int
  stdout       String?
  stderr       String?
  time         Float
  memory       Float
  status       SubmissionStatus
  submission   Submission       @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  testCase     TestCase         @relation(fields: [testCaseId], references: [id], onDelete: Cascade)

  @@index([submissionId])
  @@index([testCaseId])
}

model BoilerPlate {
  id              Int      @id @default(autoincrement())
  boilerPlateCode String
  languageId      Int      @unique
  problemId       Int
  language        Language @relation(fields: [languageId], references: [id])
  Problem         Problem  @relation(fields: [problemId], references: [id])
}

model Language {
  id          Int          @id @default(autoincrement())
  judge0Name  String
  judge0Id    Int
  monacoName  String
  boilerPlate BoilerPlate?
  submissions Submission[]
}

enum ContestLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum DifficultyLevel {
  EASY
  MEDIUM
  HARD
}

enum SubmissionStatus {
  InQueue             @map("In Queue")
  Processing          @map("Processing")
  Accepted            @map("Accepted")
  WrongAnswer         @map("Wrong Answer")
  TimeLimitExceeded   @map("Time Limit Exceeded")
  CompilationError    @map("Compilation Error")
  RuntimeErrorSIGSEGV @map("Runtime Error (SIGSEGV)")
  RuntimeErrorSIGXFSZ @map("Runtime Error (SIGXFSZ)")
  RuntimeErrorSIGFPE  @map("Runtime Error (SIGFPE)")
  RuntimeErrorSIGABRT @map("Runtime Error (SIGABRT)")
  RuntimeErrorNZEC    @map("Runtime Error (NZEC)")
  RuntimeErrorOther   @map("Runtime Error (Other)")
  InternalError       @map("Internal Error")
  ExecFormatError     @map("Exec Format Error")
}

enum SubmissionType {
  REGULAR
  CONFIRMATION_TEST
  DEMO
}
